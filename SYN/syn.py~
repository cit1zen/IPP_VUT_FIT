#!/usr/bin/python3
# -*- coding: utf-8 -*-
#DKA:xorman00

import re
re.UNICODE
from argparse import ArgumentParser 
import sys

#===================================================================================================================
#												HELP
#===================================================================================================================

help_string="""
HELP
HELP
HELP
"""

#===================================================================================================================
#												MAIN
#===================================================================================================================

def main():

	# Pole regexov 
	regex_pole=[]


	# ARGUMENTY CLI
	parser=MyArgumentParser()
	parser.add_argument('--format', nargs=1)
	parser.add_argument('--input',default="", nargs=1)
	parser.add_argument('--output',default="", nargs=1)
	parser.add_argument('--br', default=False,action='store_true')
	parser.parse_args(namespace=parser)

	try:
		FORMAT_SUBOR=''.join(parser.format)
	except:
		FORMAT_SUBOR=False

	try:
		INPUT_SUBOR=''.join(parser.input)
	except:
		INPUT_SUBOR=False

	try:
		OUTPUT_SUBOR=''.join(parser.output)
	except:
		OUTPUT_SUBOR=False

		
	BREAK=parser.br


	# FORMATOVACI SUBOR
	try:
		if(FORMAT_SUBOR):
			# Otvorenie
			FORMAT_SUBOR=open(FORMAT_SUBOR,"r")

			# Nacitanie
			for riadok in FORMAT_SUBOR:
				# Ziskanie dat
				regularny_vyraz=re.match("^[^\t]+",riadok)
				regularny_vyraz=regularny_vyraz.group(0)
				formaty=re.search("\t.+",riadok)
				formaty=re.sub("(\t)|( )","",formaty.group(0))
				for format in re.split(",",formaty):
					regex_pole.append(formatovac(regularny_vyraz,format))
			
			FORMAT_SUBOR.close()

			# Ak bol formatovaci subor prazdny tak ukoncime progrm
			if(len(regex_pole)==0):
				raise IOError

	except IOError:
		FORMAT_SUBOR=False
	# Chyba vo formatovacom subore
	except TypeError:
		exit(4)


	# FORMATOVANIE
	text=[]
	formatovacia_mapa=[]
	try:
		# NACITANIE VSTUPNEHO SUBORU
		if(INPUT_SUBOR):			
			# Nacitanie riadkov
			with open(INPUT_SUBOR,"r") as INPUT_SUBOR:
				for riadok in INPUT_SUBOR:
					text.append(riadok)
					formatovacia_mapa.append([])
					for i in range(len(riadok)):
						formatovacia_mapa[len(formatovacia_mapa)-1].append([])
		else:
			for riadok in sys.stdin:
				text.append(riadok)
				formatovacia_mapa.append([])
				for i in range(len(riadok)):
					formatovacia_mapa[len(formatovacia_mapa)-1].append([])



		# OTAGOVANIE TEXTU
		if(FORMAT_SUBOR):
			# Aplikovanie regexov
			index_formatovacej_mapy=0
			for riadok in text:
				for regularny_vyraz in regex_pole:
					regularny_vyraz.otaguj(riadok,formatovacia_mapa[index_formatovacej_mapy])
				index_formatovacej_mapy+=1


			# Zapisanie tagov do textu
			for index in range(len(text)):
				medzi_string=""
				for index_v_riadku in range(len(text[index])):
					for tag in formatovacia_mapa[index][index_v_riadku]:
						if tag!=[]:
							medzi_string=medzi_string+str(tag)
					medzi_string=medzi_string+str(text[index][index_v_riadku])
				text[index]=medzi_string


	except IOError:
		print("INPUT", file=sys.stderr)
		exit(2)
	except Exception as error:
		print(error, file=sys.stderr)
		exit(2)


	# VYPIS
	try:
		if(OUTPUT_SUBOR):
			with open(OUTPUT_SUBOR,"w") as OUTPUT_SUBOR:
				for riadok in text:
					if(BREAK):
						OUTPUT_SUBOR.write(riadok.rstrip("\n")+"<br />\n")
					else:
						OUTPUT_SUBOR.write(riadok.rstrip("\n")+"\n")
		else:
			for riadok in text:
				if(BREAK):
					sys.stdout.write(riadok.rstrip("\n")+"<br />\n")
				else:
					sys.stdout.write(riadok.rstrip("\n")+"\n")

					

	except IOError:
		print("OUTPUT", file=sys.stderr)
		exit(3)

	exit(0);


#===================================================================================================================
#												FUNKCIE
#===================================================================================================================





#===================================================================================================================
#												TRIEDY
#===================================================================================================================


# Trieda ktora sa stara o formatovanie textu
class formatovac:

	# Konstruktor
	def __init__(self,proto_regex,proto_typ):
		regularny_vyraz=self.regex(proto_regex)
		self.regularny_vyraz=re.compile(regularny_vyraz,re.UNICODE)
		self.beg_tag=self.tag(True,proto_typ)
		self.end_tag=self.tag(False,proto_typ)

	def regex(self,proto_regex):
		regularny_vyraz=proto_regex

		# %%
		regularny_vyraz=re.sub("%%","~",regularny_vyraz)

		# .. CHYBA a odstranenie .
		if(re.search("[^%]..")):
			raise TypeError
		else:
			re.sub("(?<!%).","",regularny_vyraz)

		# Negacia
		regularny_vyraz=re.sub("(?<!%)(!)(([^%])|(%.))","[^\g<2>]",regularny_vyraz)

		# White space
		regularny_vyraz=re.sub("%s","\s",regularny_vyraz)

		# Lubovolny znak
		regularny_vyraz=re.sub("%a",".",regularny_vyraz)

		# Cislo
		regularny_vyraz=re.sub("%d","\d",regularny_vyraz)

		# Male pismena
		regularny_vyraz=re.sub("%l","[a-z]",regularny_vyraz)

		# Velke pismena
		regularny_vyraz=re.sub("%L","[A-Z]",regularny_vyraz)
		
		# Mala aj velka
		regularny_vyraz=re.sub("%w","[a-zA-Z]",regularny_vyraz)

		# Vsetka pismena a cisla
		regularny_vyraz=re.sub("%W","[a-zA-Z0-9]",regularny_vyraz)

		# Tabulator
		regularny_vyraz=re.sub("%t","[a-zA-Z0-9]",regularny_vyraz)

		# Newline
		regularny_vyraz=re.sub("%n","[a-zA-Z0-9]",regularny_vyraz)

		# Specialny symboli
		regularny_vyraz=re.sub("%([\|!\*\+\(\)])","\\\1",regularny_vyraz)

		# %%
		regularny_vyraz=re.sub("~","%",regularny_vyraz)

		# CHYBA ZOSTAL NAM !
		#if(re.search("[^\\]!")):
			#raise TypeError

		#print(regularny_vyraz)
		return regularny_vyraz

	# Vrati nam zaciatocny a koncovy tag
	def tag(self,beg_tag,proto_typ):
		if(proto_typ=="italic"):
			if(beg_tag):
				return "<i>"
			else:
				return "</i>"
		if(proto_typ=="bold"):
			if(beg_tag):
				return "<b>"
			else:
				return "</b>"
		if(proto_typ=="underline"):
			if(beg_tag):
				return "<u>"
			else:
				return "</u>"
		if(proto_typ=="teletype"):
			if(beg_tag):
				return "<tt>"
			else:
				return "</tt>"
		if(re.search("^size:[1-7]$",proto_typ)):
			if(beg_tag):
				return re.sub("^size:([1-7])$","<font size=\1>",proto_typ)
			else:
				return "</font>"
		if(re.search("^color:[0-9ABCDEF]{6}$",proto_typ)):
			if(beg_tag):
				return re.sub("^color:([0-9ABCDEF]{6})$","<font color=#\1>",proto_typ)
			else:
				return "</font>"
		else:
			raise TypeError; #return


	def otaguj(self,text,formatovacia_mapa):
		for index in ([m.start() for m in re.finditer(self.regularny_vyraz,text)]):
			formatovacia_mapa[index].append(self.beg_tag)
		for index in ([m.end() for m in re.finditer(self.regularny_vyraz,text)]):
			formatovacia_mapa[index].append(self.end_tag)



# Trieda krora obaluje argparse, aby sa vypisal moj help
class MyArgumentParser(ArgumentParser):

	def print_help(self, file=None):
		print(help_string)
		exit(0)

	def print_usage(self, file=None):
		exit(1)



if __name__ == "__main__":
	main()
